import { computed, openBlock, createBlock, renderSlot, createVNode, Transition, withCtx, withDirectives, toDisplayString, vShow } from 'vue';

var script = {
    name: 'ElBadge',
    props: {
        value: {
            type: [String, Number],
            default: '',
        },
        max: {
            type: Number,
            default: 99,
        },
        isDot: Boolean,
        hidden: Boolean,
        type: {
            type: String,
            default: 'primary',
            validator: (val) => {
                return ['primary', 'success', 'warning', 'info', 'danger'].includes(val);
            },
        },
    },
    setup(props) {
        const content = computed(() => {
            if (props.isDot) {
                return;
            }
            const { value, max } = props;
            if (typeof value === 'number' && typeof max === 'number') {
                return max < value ? `${max}+` : value;
            }
            return value;
        });
        return {
            content,
        };
    },
};

const _hoisted_1 = { class: "el-badge" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default"),
    createVNode(Transition, { name: "el-zoom-in-center" }, {
      default: withCtx(() => [
        withDirectives(createVNode("sup", {
          class: ["el-badge__content", [
          'el-badge__content--' + $props.type,
          {
            'is-fixed': _ctx.$slots.default,
            'is-dot': $props.isDot
          }
        ]],
          textContent: toDisplayString($setup.content)
        }, null, 10 /* CLASS, PROPS */, ["textContent"]), [
          [vShow, !$props.hidden && ($setup.content || $setup.content === 0 || $props.isDot)]
        ])
      ]),
      _: 1
    })
  ]))
}

script.render = render;
script.__file = "packages/badge/src/index.vue";

script.install = (app) => {
    app.component(script.name, script);
};

export default script;
