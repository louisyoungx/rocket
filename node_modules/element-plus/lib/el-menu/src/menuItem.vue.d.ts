import { IMenuItemProps, RootMenuProvider } from './menu';
declare const _default: {
    name: string;
    componentName: string;
    components: {
        ElTooltip: import("vue").DefineComponent<{
            effect: {
                type: import("vue").PropType<import("@element-plus/popper").Effect>;
                default: import("@element-plus/popper").Effect;
            };
            class: {
                type: StringConstructor;
                default: string;
            };
            content: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            enterable: {
                type: BooleanConstructor;
                default: boolean;
            };
            hideAfter: {
                type: NumberConstructor;
                default: number;
            };
            manual: {
                type: BooleanConstructor;
                default: boolean;
            };
            modelValue: {
                type: BooleanConstructor;
                validator: (val: unknown) => boolean;
                default: any;
            };
            offset: {
                type: NumberConstructor;
                default: number;
            };
            openDelay: {
                type: NumberConstructor;
                default: number;
            };
            placement: {
                type: import("vue").PropType<import("@popperjs/core").Placement>;
                default: import("@popperjs/core").Placement;
            };
            popperOptions: {
                type: import("vue").PropType<import("@popperjs/core").Options>;
                default: () => any;
            };
            showAfter: {
                type: NumberConstructor;
                default: number;
            };
            transition: {
                type: StringConstructor;
                default: string;
            };
            trigger: {
                type: import("vue").PropType<string | string[]>;
                default: () => string[];
            };
            visibleArrow: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            popper: any;
            onUpdateVisible: (val: any) => void;
            updatePopper: () => any;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            class: string;
            effect: import("@element-plus/popper").Effect;
            content: string;
            disabled: boolean;
            enterable: boolean;
            hideAfter: number;
            manual: boolean;
            modelValue: boolean;
            offset: number;
            openDelay: number;
            placement: import("@popperjs/core").Placement;
            popperOptions: import("@popperjs/core").Options;
            showAfter: number;
            transition: string;
            trigger: string | string[];
            visibleArrow: boolean;
        } & {}>, {
            class: string;
            effect: import("@element-plus/popper").Effect;
            content: string;
            disabled: boolean;
            enterable: boolean;
            hideAfter: number;
            manual: boolean;
            modelValue: boolean;
            offset: number;
            openDelay: number;
            placement: import("@popperjs/core").Placement;
            popperOptions: import("@popperjs/core").Options;
            showAfter: number;
            transition: string;
            trigger: string | string[];
            visibleArrow: boolean;
        }>;
    };
    props: {
        index: {
            default: any;
            validator: (val: any) => boolean;
        };
        route: (ObjectConstructor | StringConstructor)[];
        disabled: BooleanConstructor;
    };
    emits: string[];
    setup(props: IMenuItemProps, { emit, slots }: {
        emit: any;
        slots: any;
    }): {
        parentMenu: import("vue").ComputedRef<import("vue").ComponentInternalInstance>;
        rootMenu: RootMenuProvider;
        slots: any;
        paddingStyle: import("vue").ComputedRef<{
            paddingLeft?: undefined;
        } | {
            paddingLeft: string;
        }>;
        itemStyle: import("vue").ComputedRef<{
            color: string;
            borderBottomColor: string;
        }>;
        backgroundColor: import("vue").ComputedRef<string>;
        active: import("vue").ComputedRef<boolean>;
        handleClick: () => void;
        onMouseEnter: () => void;
        onMouseLeave: () => void;
    };
};
export default _default;
