import _defineProperty from "@babel/runtime/helpers/defineProperty";
import Utils from "./aria";
/**
 * @constructor
 * @desc Dialog object providing modal focus management.
 *
 * Assumptions: The element serving as the dialog container is present in the
 * DOM and hidden. The dialog container has role='dialog'.
 *
 * @param dialogId
 *          The ID of the element serving as the dialog container.
 * @param focusAfterClosed
 *          Either the DOM node or the ID of the DOM node to focus when the
 *          dialog closes.
 * @param focusFirst
 *          Optional parameter containing either the DOM node or the ID of the
 *          DOM node to focus when the dialog opens. If not specified, the
 *          first focusable element in the dialog will receive focus.
 */

var tabEvent;

var Dialog = /*#__PURE__*/function () {
  function Dialog(dialogNode, focusAfterClosed, focusFirst) {
    var _this = this;

    this.dialogNode = dialogNode;
    this.focusAfterClosed = focusAfterClosed;
    this.focusFirst = focusFirst;

    _defineProperty(this, "lastFocus", null);

    if (this.dialogNode === null || this.dialogNode.getAttribute('role') !== 'dialog') {
      throw new Error('Dialog() requires a DOM element with ARIA role of dialog.');
    }

    if (typeof focusAfterClosed === 'string') {
      this.focusAfterClosed = document.getElementById(focusAfterClosed);
    } else if (typeof focusAfterClosed === 'object') {
      this.focusAfterClosed = focusAfterClosed;
    } else {
      this.focusAfterClosed = null;
    }

    if (typeof focusFirst === 'string') {
      this.focusFirst = document.getElementById(focusFirst);
    } else if (typeof focusFirst === 'object') {
      this.focusFirst = focusFirst;
    } else {
      this.focusFirst = null;
    }

    if (this.focusFirst) {
      this.focusFirst.focus();
    } else {
      Utils.focusFirstDescendant(this.dialogNode);
    }

    this.lastFocus = document.activeElement;

    tabEvent = function tabEvent(e) {
      _this.trapFocus(e);
    };

    this.addListeners();
  }

  var _proto = Dialog.prototype;

  _proto.addListeners = function addListeners() {
    document.addEventListener('focus', tabEvent, true);
  };

  _proto.removeListeners = function removeListeners() {
    document.removeEventListener('focus', tabEvent, true);
  };

  _proto.closeDialog = function closeDialog() {
    var _this2 = this;

    this.removeListeners();

    if (this.focusAfterClosed) {
      setTimeout(function () {
        _this2.focusAfterClosed.focus();
      });
    }
  };

  _proto.trapFocus = function trapFocus(event) {
    if (Utils.IgnoreUtilFocusChanges) {
      return;
    }

    if (this.dialogNode.contains(event.target)) {
      this.lastFocus = event.target;
    } else {
      Utils.focusFirstDescendant(this.dialogNode);

      if (this.lastFocus === document.activeElement) {
        Utils.focusLastDescendant(this.dialogNode);
      }

      this.lastFocus = document.activeElement;
    }
  };

  return Dialog;
}();

export default Dialog;