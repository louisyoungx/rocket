import { defineComponent, ref, computed, watch, nextTick, onMounted, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, withDirectives, withModifiers, renderSlot, toDisplayString, createCommentVNode, vShow } from 'vue';
import usePopup from '../utils/popup/usePopup';
import Utils from '../utils/aria';

var script = defineComponent({
    name: 'ElDrawer',
    props: {
        modelValue: Boolean,
        appendToBody: {
            type: Boolean,
            default: false,
        },
        beforeClose: Function,
        customClass: {
            type: String,
            default: '',
        },
        direction: {
            type: String,
            default: 'rtl',
            validator: (val) => {
                return ['ltr', 'rtl', 'ttb', 'btt'].indexOf(val) !== -1;
            },
        },
        showClose: {
            type: Boolean,
            default: true,
        },
        size: {
            type: String,
            default: '30%',
        },
        title: {
            type: String,
            default: '',
        },
        wrapperClosable: {
            type: Boolean,
            default: true,
        },
        withHeader: {
            type: Boolean,
            default: true,
        },
        openDelay: {
            type: Number,
            default: 0,
        },
        closeDelay: {
            type: Number,
            default: 0,
        },
        zIndex: Number,
        modal: {
            type: Boolean,
            default: true,
        },
        modalFade: {
            type: Boolean,
            default: true,
        },
        modalClass: String,
        modalAppendToBody: {
            type: Boolean,
            default: true,
        },
        lockScroll: {
            type: Boolean,
            default: true,
        },
        closeOnPressEscape: {
            type: Boolean,
            default: true,
        },
        closeOnClickModal: {
            type: Boolean,
            default: false,
        },
        destroyOnClose: {
            type: Boolean,
            default: false,
        },
    },
    emits: ['open', 'opened', 'close', 'closed', 'update:modelValue'],
    setup(props, ctx) {
        const { state, doAfterClose, updateClosingFlag, restoreBodyStyle, } = usePopup(props, doClose);
        const drawer = ref(null);
        const root = ref(null);
        const prevActiveElement = ref(null);
        const closed = ref(false);
        const isHorizontal = computed(() => props.direction === 'rtl' || props.direction === 'ltr');
        function afterEnter() {
            ctx.emit('opened');
        }
        function doClose() {
            updateClosingFlag(true);
            props.lockScroll && setTimeout(restoreBodyStyle, 200);
            state.opened = false;
            doAfterClose();
        }
        function afterLeave() {
            ctx.emit('closed');
        }
        function hide(cancel = true) {
            if (cancel !== false) {
                ctx.emit('update:modelValue', false);
                ctx.emit('close');
                if (props.destroyOnClose === true) {
                    state.rendered = false;
                }
                closed.value = true;
            }
        }
        function handleWrapperClick() {
            if (props.wrapperClosable) {
                closeDrawer();
            }
        }
        function closeDrawer() {
            if (typeof props.beforeClose === 'function') {
                props.beforeClose(hide);
            }
            else {
                hide();
            }
        }
        function handleClose() {
            closeDrawer();
        }
        watch(() => props.modelValue, val => {
            state.visible = val;
            if (val) {
                closed.value = false;
                ctx.emit('open');
                prevActiveElement.value = document.activeElement;
                nextTick(() => {
                    Utils.focusFirstDescendant(drawer.value);
                });
            }
            else {
                if (!closed.value)
                    ctx.emit('close');
                nextTick(() => {
                    var _a;
                    (_a = prevActiveElement.value) === null || _a === void 0 ? void 0 : _a.focus();
                });
            }
        });
        onMounted(() => {
            if (props.modelValue) {
                state.rendered = true;
                state.visible = true;
            }
        });
        return {
            state,
            root,
            drawer,
            closed,
            afterEnter,
            afterLeave,
            handleWrapperClick,
            isHorizontal,
            closeDrawer,
            handleClose,
        };
    },
});

const _hoisted_1 = {
  ref: "root",
  class: "el-drawer__wrapper",
  tabindex: "-1"
};
const _hoisted_2 = {
  key: 0,
  id: "el-drawer__title",
  class: "el-drawer__header"
};
const _hoisted_3 = /*#__PURE__*/createVNode("i", { class: "el-drawer__close el-icon el-icon-close" }, null, -1 /* HOISTED */);
const _hoisted_4 = {
  key: 1,
  class: "el-drawer__body"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(Teleport, {
    to: "body",
    disabled: !_ctx.appendToBody
  }, [
    createVNode(Transition, {
      name: "el-drawer-fade",
      onAfterEnter: _ctx.afterEnter,
      onAfterLeave: _ctx.afterLeave
    }, {
      default: withCtx(() => [
        withDirectives(createVNode("div", _hoisted_1, [
          createVNode("div", {
            class: ["el-drawer__container", _ctx.modelValue && 'el-drawer__open'],
            tabindex: "-1",
            role: "document",
            onClick: _cache[2] || (_cache[2] = withModifiers((...args) => (_ctx.handleWrapperClick(...args)), ["self"]))
          }, [
            createVNode("div", {
              ref: "drawer",
              "aria-modal": "true",
              "aria-labelledby": "el-drawer__title",
              "aria-label": _ctx.title,
              class: ["el-drawer", [_ctx.direction, _ctx.customClass]],
              style: _ctx.isHorizontal ? 'width: ' + _ctx.size : 'height: ' + _ctx.size,
              role: "dialog",
              tabindex: "-1"
            }, [
              (_ctx.withHeader)
                ? (openBlock(), createBlock("header", _hoisted_2, [
                    renderSlot(_ctx.$slots, "title", {}, () => [
                      createVNode("span", {
                        role: "heading",
                        tabindex: "-1",
                        title: _ctx.title
                      }, toDisplayString(_ctx.title), 9 /* TEXT, PROPS */, ["title"])
                    ]),
                    (_ctx.showClose)
                      ? (openBlock(), createBlock("button", {
                          key: 0,
                          "aria-label": 'close ' + (_ctx.title || 'drawer'),
                          class: "el-drawer__close-btn",
                          type: "button",
                          onClick: _cache[1] || (_cache[1] = (...args) => (_ctx.closeDrawer(...args)))
                        }, [
                          _hoisted_3
                        ], 8 /* PROPS */, ["aria-label"]))
                      : createCommentVNode("v-if", true)
                  ]))
                : createCommentVNode("v-if", true),
              (_ctx.state.rendered)
                ? (openBlock(), createBlock("section", _hoisted_4, [
                    renderSlot(_ctx.$slots, "default")
                  ]))
                : createCommentVNode("v-if", true)
            ], 14 /* CLASS, STYLE, PROPS */, ["aria-label"])
          ], 2 /* CLASS */)
        ], 512 /* NEED_PATCH */), [
          [vShow, _ctx.modelValue]
        ])
      ]),
      _: 1
    }, 8 /* PROPS */, ["onAfterEnter", "onAfterLeave"])
  ], 8 /* PROPS */, ["disabled"]))
}

script.render = render;
script.__file = "packages/drawer/src/index.vue";

script.install = (app) => {
    app.component(script.name, script);
};

export default script;
