import type { ComponentPublicInstance, SetupContext, Ref } from 'vue';
import type { IPopperOptions, PopperInstance } from './defaults';
declare type ElementType = ComponentPublicInstance | HTMLElement;
export declare const DEFAULT_TRIGGER: string[];
export declare const UPDATE_VISIBLE_EVENT = "update:visible";
export default function (props: IPopperOptions, { emit }: SetupContext<string[]>): {
    update: () => void;
    doDestroy: (forceDestroy?: boolean) => void;
    show: () => void;
    hide: () => void;
    onPopperMouseEnter: () => void;
    onPopperMouseLeave: () => void;
    onAfterEnter: () => void;
    onAfterLeave: () => void;
    onBeforeEnter: () => void;
    onBeforeLeave: () => void;
    initializePopper: () => void;
    isManualMode: () => boolean;
    arrowRef: Ref<HTMLElement>;
    events: {
        onClick?: (e: Event) => void;
        onMouseEnter?: (e: Event) => void;
        onMouseLeave?: (e: Event) => void;
        onFocus?: (e: Event) => void;
        onBlur?: (e: Event) => void;
    };
    popperId: string;
    popperInstance: PopperInstance;
    popperRef: Ref<HTMLElement>;
    popperStyle: import("vue").ComputedRef<{
        zIndex: string;
    }>;
    triggerRef: Ref<ElementType>;
    visibility: import("vue").WritableComputedRef<boolean>;
};
export * from './defaults';
