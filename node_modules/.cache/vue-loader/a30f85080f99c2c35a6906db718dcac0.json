{"remainingRequest":"/Users/ericaaron/Developer/Git/rocket/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/ericaaron/Developer/Git/rocket/src/views/Gate/GateReports.vue?vue&type=template&id=52a0f34a&scoped=true&bindings=undefined","dependencies":[{"path":"/Users/ericaaron/Developer/Git/rocket/src/views/Gate/GateReports.vue","mtime":1604811553814},{"path":"/Users/ericaaron/Developer/Git/rocket/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericaaron/Developer/Git/rocket/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericaaron/Developer/Git/rocket/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/ericaaron/Developer/Git/rocket/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericaaron/Developer/Git/rocket/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8Z2F0ZS1iYXNlPgogICAgICAgIDxhcnRpY2xlPgogICAgICAgICAgICA8aDM+TW9kdWxhciA8c3BhbiBjbGFzcz0iYmFkZ2UgbmV3Ij7mlrA8L3NwYW4+PC9oMz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWxlZC1jaGFydC1jb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FudmFzLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgPGNhbnZhcyBpZD0iTUQiIHdpZHRoPSI0ODIiIGhlaWdodD0iNDgyIiBzdHlsZT0id2lkdGg6IDI0MXB4OyBoZWlnaHQ6IDI0MXB4OyI+CiAgICAgICAgICAgICAgICAgICAgPC9jYW52YXM+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZG91Z2hudXQtbGVnZW5kIj48bGk+PHNwYW4gc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IzVCOTBCRiI+PC9zcGFuPkNvcmU8L2xpPjxsaT48c3BhbiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojOTZiNWI0Ij48L3NwYW4+QmFyPC9saT48bGk+PHNwYW4gc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I2EzYmU4YyI+PC9zcGFuPkRvdWdobnV0PC9saT48bGk+PHNwYW4gc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I2FiNzk2NyI+PC9zcGFuPlJhZGFyPC9saT48bGk+PHNwYW4gc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I2QwODc3MCI+PC9zcGFuPkxpbmU8L2xpPjxsaT48c3BhbiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojYjQ4ZWFkIj48L3NwYW4+UG9sYXIgQXJlYTwvbGk+PC91bD48L2Rpdj4KICAgICAgICA8L2FydGljbGU+CiAgICAgICAgPGNhbnZhcyBpZD0ibXlDaGFydCIgd2lkdGg9IjY2MCIgaGVpZ2h0PSIzMzAiIHN0eWxlPSJ3aWR0aDogMzMwcHg7IGhlaWdodDogMTY1cHg7Ij48L2NhbnZhcz4KICAgIDwvZ2F0ZS1iYXNlPgo="},{"version":3,"sources":["/Users/ericaaron/Developer/Git/rocket/src/views/Gate/GateReports.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACZ,CAAC,CAAC,CAAC,CAAC,CAAC;gfile":"/Users/ericaaron/Developer/Git/rocket/src/views/Gate/GateReports.vue","sourceRoot":"","sourcesContent":["<template>\n    <gate-base>\n        <article>\n            <h3>Modular <span class=\"badge new\">æ–°</span></h3>\n            <div class=\"labeled-chart-container\">\n                <div class=\"canvas-holder\">\n                    <canvas id=\"MD\" width=\"482\" height=\"482\" style=\"width: 241px; height: 241px;\">\n                    </canvas>\n                </div>\n                <ul class=\"doughnut-legend\"><li><span style=\"background-color:#5B90BF\"></span>Core</li><li><span style=\"background-color:#96b5b4\"></span>Bar</li><li><span style=\"background-color:#a3be8c\"></span>Doughnut</li><li><span style=\"background-color:#ab7967\"></span>Radar</li><li><span style=\"background-color:#d08770\"></span>Line</li><li><span style=\"background-color:#b48ead\"></span>Polar Area</li></ul></div>\n        </article>\n        <canvas id=\"myChart\" width=\"660\" height=\"330\" style=\"width: 330px; height: 165px;\"></canvas>\n    </gate-base>\n</template>\n\n<script>\n    import chart from 'chart.js'\n    import GateBase from \"./components/GateBase\";\n    export default {\n        name: \"GateReports\",\n        components: {GateBase},\n        mounted() {\n            // Colour variables\n            const red = \"#bf616a\",\n                blue = \"#5B90BF\",\n                orange = \"#d08770\",\n                yellow = \"#ebcb8b\",\n                green = \"#a3be8c\",\n                teal = \"#96b5b4\",\n                pale_blue = \"#8fa1b3\",\n                purple = \"#b48ead\",\n                brown = \"#ab7967\";\n            const colours = {\n                \"Core\": blue,\n                \"Line\": orange,\n                \"Bar\": teal,\n                \"Polar Area\": purple,\n                \"Radar\": brown,\n                \"Doughnut\": green\n            };\n            const moduleData = [\n                {\n                    value: 7.57,\n                    color: colours[\"Core\"],\n                    highlight: this.Colour(colours[\"Core\"], 10),\n                    label: \"Core\"\n                },\n                {\n                    value: 1.63,\n                    color: colours[\"Bar\"],\n                    highlight: this.Colour(colours[\"Bar\"], 10),\n                    label: \"Bar\"\n                },\n                {\n                    value: 1.09,\n                    color: colours[\"Doughnut\"],\n                    highlight: this.Colour(colours[\"Doughnut\"], 10),\n                    label: \"Doughnut\"\n                },\n                {\n                    value: 1.71,\n                    color: colours[\"Radar\"],\n                    highlight: this.Colour(colours[\"Radar\"], 10),\n                    label: \"Radar\"\n                },\n                {\n                    value: 1.64,\n                    color: colours[\"Line\"],\n                    highlight: this.Colour(colours[\"Line\"], 10),\n                    label: \"Line\"\n                },\n                {\n                    value: 1.37,\n                    color: colours[\"Polar Area\"],\n                    highlight: this.Colour(colours[\"Polar Area\"], 10),\n                    label: \"Polar Area\"\n                }\n            ];\n            const DOptions = {\n                //Boolean - Whether we should show a stroke on each segment\n                segmentShowStroke : true,\n\n                //String - The colour of each segment stroke\n                segmentStrokeColor : \"#fff\",\n\n                //Number - The width of each segment stroke\n                segmentStrokeWidth : 2,\n\n                //Number - The percentage of the chart that we cut out of the middle\n                percentageInnerCutout : 50, // This is 0 for Pie charts\n\n                //Number - Amount of animation steps\n                animationSteps : 100,\n\n                //String - Animation easing effect\n                animationEasing : \"easeOutBounce\",\n\n                //Boolean - Whether we animate the rotation of the Doughnut\n                animateRotate : true,\n\n                //Boolean - Whether we animate scaling the Doughnut from the centre\n                animateScale : false,\n\n                //String - A legend template\n                legendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\"\n            }\n\n            const ctx = document.getElementById(\"myChart\");\n            const myChart = new Chart(ctx).;\n\n        },\n        methods:{\n            Colour(col, amt) {\n                var usePound = false;\n\n                if (col[0] == \"#\") {\n                    col = col.slice(1);\n                    usePound = true;\n                }\n\n                var num = parseInt(col,16);\n\n                var r = (num >> 16) + amt;\n\n                if (r > 255) r = 255;\n                else if  (r < 0) r = 0;\n\n                var b = ((num >> 8) & 0x00FF) + amt;\n\n                if (b > 255) b = 255;\n                else if  (b < 0) b = 0;\n\n                var g = (num & 0x0000FF) + amt;\n\n                if (g > 255) g = 255;\n                else if (g < 0) g = 0;\n\n                return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n"]}]}